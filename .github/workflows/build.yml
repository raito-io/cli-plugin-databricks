name: Raito CLI - Databricks Plugin - Build
on:
  push:
    branches:
      - 'main'
  pull_request:
permissions:
  id-token: write
  contents: read
jobs:
  lint:
    name: "Linting"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true

      - name: Mod Tidy
        run: go mod tidy

      - name: Generate
        run: make generate

      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.63.4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform lint
        run: terraform fmt -check=true -recursive
        working-directory: .infra/infra

  remove-old-infra:
    uses: ./.github/workflows/destroy-grants.yml
    with:
      targetEnvironment: integration_testing
      catalogs: "raito_testing"
    secrets: inherit

  setup-infra:
    uses: ./.github/workflows/generate-infra.yml
    with:
      targetEnvironment: integration_testing
      target: module.testing
    secrets: inherit

    needs:
      - remove-old-infra
    if: always()

  generate-usage:
    uses: ./.github/workflows/generate-usage.yml
    with:
      targetEnvironment: integration_testing
    secrets: inherit

    needs:
      - setup-infra
    if: needs.setup-infra.result == 'success'

  build:
    needs:
      - setup-infra
      - generate-usage
      - lint
    if: needs.generate-usage.result == 'success'

    runs-on: ubuntu-latest
    environment: integration_testing

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true

      - name: Mod Tidy
        run: go mod tidy

      - name: Build
        run: make build

      - name: Test
        run: make test
        env:
          DB_ACCOUNT_ID: ${{ secrets.DB_ACCOUNT_ID }}
          DB_CLIENT_ID: ${{ secrets.DB_CLIENT_ID }}
          DB_CLIENT_SECRET: ${{ secrets.DB_CLIENT_SECRET }}
          DB_PLATFORM: ${{ secrets.DB_PLATFORM }}
          DB_TESTING_DEPLOYMENT: ${{ secrets.DB_DEPLOYMENT_ID }}
          DB_TESTING_METASTORE: ${{ secrets.DB_METASTORE_ID }}
          DB_SQL_WAREHOUSE_ID: ${{ secrets.DB_SQL_WAREHOUSE_ID }}
          DB_TESTING_WORKSPACE: ${{ secrets.DB_TESTING_WORKSPACE }}

      - name: Test Sync
        run: make test-sync
        env:
          DB_ACCOUNT_ID: ${{ secrets.DB_ACCOUNT_ID }}
          DB_CLIENT_ID: ${{ secrets.DB_CLIENT_ID }}
          DB_CLIENT_SECRET: ${{ secrets.DB_CLIENT_SECRET }}
          DB_PLATFORM: ${{ secrets.DB_PLATFORM }}
          DB_TESTING_DEPLOYMENT: ${{ secrets.DB_DEPLOYMENT_ID }}
          DB_TESTING_METASTORE: ${{ secrets.DB_METASTORE_ID }}
          DB_SQL_WAREHOUSE_ID: ${{ secrets.DB_SQL_WAREHOUSE_ID }}
          DB_TESTING_WORKSPACE: ${{ secrets.DB_TESTING_WORKSPACE }}

      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt,./coverage-sync.txt
