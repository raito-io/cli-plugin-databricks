name: Manual - Generate infra
on:
  workflow_call:
    inputs:
      targetEnvironment:
        required: true
        type: string
      target:
        required: false
        type: string
        default: ""
    secrets:
      AWS_OIDC_DEPLOY_ROLE:
        required: true
      AWS_REGION:
        required: true
      AWS_S3_TERRAFORM_BUCKET:
        required: true
      AWS_S3_TERRAFORM_KEY:
        required: true
      AWS_DYNAMODB_TERRAFORM_TABLE:
        required: true
      DB_HOST:
        required: true
      DB_USERNAME:
        required: true
      DB_PASSWORD:
        required: true
      DB_ACCOUNT_ID:
        required: true
      DB_METASTORE_ID:
        required: true
      DB_SQL_WAREHOUSE_ID:
        required: true
      DB_WORKSPACE_NAME:
        required: true
      DB_OWNER_GROUP_NAME:
        required: true
  workflow_dispatch:
    inputs:
      targetEnvironment:
        type: choice
        description: Please select a target environment
        required: true
        default: 'integration_testing'
        options:
          - integration_testing
          - testing
      target:
        type: choice
        description: Select a target
        required: true
        default: "module.testing"
        options:
          - "module.testing"
          - "module.demo"
          - ""
permissions:
  id-token: write
  contents: read
jobs:
  generate-infra:
    environment: ${{ inputs.targetEnvironment }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Assume role using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Format terraform
        run: terraform fmt -check -recursive
        working-directory: .infra/infra

      - name: Terraform backend
        run: |
          cat <<EOF > .infra/infra/backend_override.tf
          terraform {
            backend "s3" {
            }
          }
          EOF

      - name: Terraform init
        run: |
          terraform init \
            -backend-config=bucket=${AWS_S3_TERRAFORM_BUCKET} \
            -backend-config=key=${AWS_S3_TERRAFORM_KEY} \
            -backend-config=region=${AWS_REGION} \
            -backend-config=access_key=${AWS_ACCESS_KEY_ID} \
            -backend-config=secret_key=${AWS_SECRET_ACCESS_KEY} \
            -backend-config=token=${AWS_SESSION_TOKEN} \
            -backend-config=dynamodb_table=${AWS_DYNAMODB_TERRAFORM_TABLE}
        working-directory: .infra/infra
        env:
          AWS_S3_TERRAFORM_BUCKET: ${{ secrets.AWS_S3_TERRAFORM_BUCKET }}
          AWS_S3_TERRAFORM_KEY: ${{ secrets.AWS_S3_TERRAFORM_KEY }}

      - name: Generate infra
        run: make gen-test-infra
        env:
          TF_VAR_databricks_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_databricks_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_databricks_account_id: ${{ secrets.DB_ACCOUNT_ID }}
          TF_VAR_databricks_workspace_host: ${{ secrets.DB_HOST }}
          TF_VAR_databricks_metastore_id: ${{ secrets.DB_METASTORE_ID }}
          TF_VAR_databricks_sql_warehouse_id: ${{ secrets.DB_SQL_WAREHOUSE_ID }}
          TF_VAR_databricks_workspace_name: ${{ secrets.DB_WORKSPACE_NAME }}
          TF_VAR_owner_group_name: ${{ secrets.DB_OWNER_GROUP_NAME }}
          TARGET: ${{ inputs.target }}
