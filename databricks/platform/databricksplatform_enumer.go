// Code generated by "enumer -type=DatabricksPlatform -trimprefix=DatabricksPlatform -transform=lower"; DO NOT EDIT.

package platform

import (
	"fmt"
	"strings"
)

const _DatabricksPlatformName = "azuregcpaws"

var _DatabricksPlatformIndex = [...]uint8{0, 5, 8, 11}

const _DatabricksPlatformLowerName = "azuregcpaws"

func (i DatabricksPlatform) String() string {
	i -= 1
	if i < 0 || i >= DatabricksPlatform(len(_DatabricksPlatformIndex)-1) {
		return fmt.Sprintf("DatabricksPlatform(%d)", i+1)
	}
	return _DatabricksPlatformName[_DatabricksPlatformIndex[i]:_DatabricksPlatformIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DatabricksPlatformNoOp() {
	var x [1]struct{}
	_ = x[DatabricksPlatformAzure-(1)]
	_ = x[DatabricksPlatformGCP-(2)]
	_ = x[DatabricksPlatformAWS-(3)]
}

var _DatabricksPlatformValues = []DatabricksPlatform{DatabricksPlatformAzure, DatabricksPlatformGCP, DatabricksPlatformAWS}

var _DatabricksPlatformNameToValueMap = map[string]DatabricksPlatform{
	_DatabricksPlatformName[0:5]:       DatabricksPlatformAzure,
	_DatabricksPlatformLowerName[0:5]:  DatabricksPlatformAzure,
	_DatabricksPlatformName[5:8]:       DatabricksPlatformGCP,
	_DatabricksPlatformLowerName[5:8]:  DatabricksPlatformGCP,
	_DatabricksPlatformName[8:11]:      DatabricksPlatformAWS,
	_DatabricksPlatformLowerName[8:11]: DatabricksPlatformAWS,
}

var _DatabricksPlatformNames = []string{
	_DatabricksPlatformName[0:5],
	_DatabricksPlatformName[5:8],
	_DatabricksPlatformName[8:11],
}

// DatabricksPlatformString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DatabricksPlatformString(s string) (DatabricksPlatform, error) {
	if val, ok := _DatabricksPlatformNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DatabricksPlatformNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DatabricksPlatform values", s)
}

// DatabricksPlatformValues returns all values of the enum
func DatabricksPlatformValues() []DatabricksPlatform {
	return _DatabricksPlatformValues
}

// DatabricksPlatformStrings returns a slice of all String values of the enum
func DatabricksPlatformStrings() []string {
	strs := make([]string, len(_DatabricksPlatformNames))
	copy(strs, _DatabricksPlatformNames)
	return strs
}

// IsADatabricksPlatform returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DatabricksPlatform) IsADatabricksPlatform() bool {
	for _, v := range _DatabricksPlatformValues {
		if i == v {
			return true
		}
	}
	return false
}
