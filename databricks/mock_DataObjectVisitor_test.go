// Code generated by mockery v2.53.3. DO NOT EDIT.

package databricks

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	mock "github.com/stretchr/testify/mock"

	provisioning "github.com/databricks/databricks-sdk-go/service/provisioning"
)

// MockDataObjectVisitor is an autogenerated mock type for the DataObjectVisitor type
type MockDataObjectVisitor struct {
	mock.Mock
}

type MockDataObjectVisitor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataObjectVisitor) EXPECT() *MockDataObjectVisitor_Expecter {
	return &MockDataObjectVisitor_Expecter{mock: &_m.Mock}
}

// VisitCatalog provides a mock function with given fields: ctx, _a1, parent, workspace
func (_m *MockDataObjectVisitor) VisitCatalog(ctx context.Context, _a1 *catalog.CatalogInfo, parent *catalog.MetastoreInfo, workspace *provisioning.Workspace) error {
	ret := _m.Called(ctx, _a1, parent, workspace)

	if len(ret) == 0 {
		panic("no return value specified for VisitCatalog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.CatalogInfo, *catalog.MetastoreInfo, *provisioning.Workspace) error); ok {
		r0 = rf(ctx, _a1, parent, workspace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataObjectVisitor_VisitCatalog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitCatalog'
type MockDataObjectVisitor_VisitCatalog_Call struct {
	*mock.Call
}

// VisitCatalog is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *catalog.CatalogInfo
//   - parent *catalog.MetastoreInfo
//   - workspace *provisioning.Workspace
func (_e *MockDataObjectVisitor_Expecter) VisitCatalog(ctx interface{}, _a1 interface{}, parent interface{}, workspace interface{}) *MockDataObjectVisitor_VisitCatalog_Call {
	return &MockDataObjectVisitor_VisitCatalog_Call{Call: _e.mock.On("VisitCatalog", ctx, _a1, parent, workspace)}
}

func (_c *MockDataObjectVisitor_VisitCatalog_Call) Run(run func(ctx context.Context, _a1 *catalog.CatalogInfo, parent *catalog.MetastoreInfo, workspace *provisioning.Workspace)) *MockDataObjectVisitor_VisitCatalog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*catalog.CatalogInfo), args[2].(*catalog.MetastoreInfo), args[3].(*provisioning.Workspace))
	})
	return _c
}

func (_c *MockDataObjectVisitor_VisitCatalog_Call) Return(_a0 error) *MockDataObjectVisitor_VisitCatalog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataObjectVisitor_VisitCatalog_Call) RunAndReturn(run func(context.Context, *catalog.CatalogInfo, *catalog.MetastoreInfo, *provisioning.Workspace) error) *MockDataObjectVisitor_VisitCatalog_Call {
	_c.Call.Return(run)
	return _c
}

// VisitColumn provides a mock function with given fields: ctx, column, parent, workspace
func (_m *MockDataObjectVisitor) VisitColumn(ctx context.Context, column *catalog.ColumnInfo, parent *catalog.TableInfo, workspace *provisioning.Workspace) error {
	ret := _m.Called(ctx, column, parent, workspace)

	if len(ret) == 0 {
		panic("no return value specified for VisitColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.ColumnInfo, *catalog.TableInfo, *provisioning.Workspace) error); ok {
		r0 = rf(ctx, column, parent, workspace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataObjectVisitor_VisitColumn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitColumn'
type MockDataObjectVisitor_VisitColumn_Call struct {
	*mock.Call
}

// VisitColumn is a helper method to define mock.On call
//   - ctx context.Context
//   - column *catalog.ColumnInfo
//   - parent *catalog.TableInfo
//   - workspace *provisioning.Workspace
func (_e *MockDataObjectVisitor_Expecter) VisitColumn(ctx interface{}, column interface{}, parent interface{}, workspace interface{}) *MockDataObjectVisitor_VisitColumn_Call {
	return &MockDataObjectVisitor_VisitColumn_Call{Call: _e.mock.On("VisitColumn", ctx, column, parent, workspace)}
}

func (_c *MockDataObjectVisitor_VisitColumn_Call) Run(run func(ctx context.Context, column *catalog.ColumnInfo, parent *catalog.TableInfo, workspace *provisioning.Workspace)) *MockDataObjectVisitor_VisitColumn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*catalog.ColumnInfo), args[2].(*catalog.TableInfo), args[3].(*provisioning.Workspace))
	})
	return _c
}

func (_c *MockDataObjectVisitor_VisitColumn_Call) Return(_a0 error) *MockDataObjectVisitor_VisitColumn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataObjectVisitor_VisitColumn_Call) RunAndReturn(run func(context.Context, *catalog.ColumnInfo, *catalog.TableInfo, *provisioning.Workspace) error) *MockDataObjectVisitor_VisitColumn_Call {
	_c.Call.Return(run)
	return _c
}

// VisitFunction provides a mock function with given fields: ctx, function, parent, workspace
func (_m *MockDataObjectVisitor) VisitFunction(ctx context.Context, function *catalog.FunctionInfo, parent *catalog.SchemaInfo, workspace *provisioning.Workspace) error {
	ret := _m.Called(ctx, function, parent, workspace)

	if len(ret) == 0 {
		panic("no return value specified for VisitFunction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.FunctionInfo, *catalog.SchemaInfo, *provisioning.Workspace) error); ok {
		r0 = rf(ctx, function, parent, workspace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataObjectVisitor_VisitFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitFunction'
type MockDataObjectVisitor_VisitFunction_Call struct {
	*mock.Call
}

// VisitFunction is a helper method to define mock.On call
//   - ctx context.Context
//   - function *catalog.FunctionInfo
//   - parent *catalog.SchemaInfo
//   - workspace *provisioning.Workspace
func (_e *MockDataObjectVisitor_Expecter) VisitFunction(ctx interface{}, function interface{}, parent interface{}, workspace interface{}) *MockDataObjectVisitor_VisitFunction_Call {
	return &MockDataObjectVisitor_VisitFunction_Call{Call: _e.mock.On("VisitFunction", ctx, function, parent, workspace)}
}

func (_c *MockDataObjectVisitor_VisitFunction_Call) Run(run func(ctx context.Context, function *catalog.FunctionInfo, parent *catalog.SchemaInfo, workspace *provisioning.Workspace)) *MockDataObjectVisitor_VisitFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*catalog.FunctionInfo), args[2].(*catalog.SchemaInfo), args[3].(*provisioning.Workspace))
	})
	return _c
}

func (_c *MockDataObjectVisitor_VisitFunction_Call) Return(_a0 error) *MockDataObjectVisitor_VisitFunction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataObjectVisitor_VisitFunction_Call) RunAndReturn(run func(context.Context, *catalog.FunctionInfo, *catalog.SchemaInfo, *provisioning.Workspace) error) *MockDataObjectVisitor_VisitFunction_Call {
	_c.Call.Return(run)
	return _c
}

// VisitMetastore provides a mock function with given fields: ctx, metastore, workspaces
func (_m *MockDataObjectVisitor) VisitMetastore(ctx context.Context, metastore *catalog.MetastoreInfo, workspaces []*provisioning.Workspace) error {
	ret := _m.Called(ctx, metastore, workspaces)

	if len(ret) == 0 {
		panic("no return value specified for VisitMetastore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.MetastoreInfo, []*provisioning.Workspace) error); ok {
		r0 = rf(ctx, metastore, workspaces)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataObjectVisitor_VisitMetastore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitMetastore'
type MockDataObjectVisitor_VisitMetastore_Call struct {
	*mock.Call
}

// VisitMetastore is a helper method to define mock.On call
//   - ctx context.Context
//   - metastore *catalog.MetastoreInfo
//   - workspaces []*provisioning.Workspace
func (_e *MockDataObjectVisitor_Expecter) VisitMetastore(ctx interface{}, metastore interface{}, workspaces interface{}) *MockDataObjectVisitor_VisitMetastore_Call {
	return &MockDataObjectVisitor_VisitMetastore_Call{Call: _e.mock.On("VisitMetastore", ctx, metastore, workspaces)}
}

func (_c *MockDataObjectVisitor_VisitMetastore_Call) Run(run func(ctx context.Context, metastore *catalog.MetastoreInfo, workspaces []*provisioning.Workspace)) *MockDataObjectVisitor_VisitMetastore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*catalog.MetastoreInfo), args[2].([]*provisioning.Workspace))
	})
	return _c
}

func (_c *MockDataObjectVisitor_VisitMetastore_Call) Return(_a0 error) *MockDataObjectVisitor_VisitMetastore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataObjectVisitor_VisitMetastore_Call) RunAndReturn(run func(context.Context, *catalog.MetastoreInfo, []*provisioning.Workspace) error) *MockDataObjectVisitor_VisitMetastore_Call {
	_c.Call.Return(run)
	return _c
}

// VisitSchema provides a mock function with given fields: ctx, schema, parent, workspace
func (_m *MockDataObjectVisitor) VisitSchema(ctx context.Context, schema *catalog.SchemaInfo, parent *catalog.CatalogInfo, workspace *provisioning.Workspace) error {
	ret := _m.Called(ctx, schema, parent, workspace)

	if len(ret) == 0 {
		panic("no return value specified for VisitSchema")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.SchemaInfo, *catalog.CatalogInfo, *provisioning.Workspace) error); ok {
		r0 = rf(ctx, schema, parent, workspace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataObjectVisitor_VisitSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitSchema'
type MockDataObjectVisitor_VisitSchema_Call struct {
	*mock.Call
}

// VisitSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - schema *catalog.SchemaInfo
//   - parent *catalog.CatalogInfo
//   - workspace *provisioning.Workspace
func (_e *MockDataObjectVisitor_Expecter) VisitSchema(ctx interface{}, schema interface{}, parent interface{}, workspace interface{}) *MockDataObjectVisitor_VisitSchema_Call {
	return &MockDataObjectVisitor_VisitSchema_Call{Call: _e.mock.On("VisitSchema", ctx, schema, parent, workspace)}
}

func (_c *MockDataObjectVisitor_VisitSchema_Call) Run(run func(ctx context.Context, schema *catalog.SchemaInfo, parent *catalog.CatalogInfo, workspace *provisioning.Workspace)) *MockDataObjectVisitor_VisitSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*catalog.SchemaInfo), args[2].(*catalog.CatalogInfo), args[3].(*provisioning.Workspace))
	})
	return _c
}

func (_c *MockDataObjectVisitor_VisitSchema_Call) Return(_a0 error) *MockDataObjectVisitor_VisitSchema_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataObjectVisitor_VisitSchema_Call) RunAndReturn(run func(context.Context, *catalog.SchemaInfo, *catalog.CatalogInfo, *provisioning.Workspace) error) *MockDataObjectVisitor_VisitSchema_Call {
	_c.Call.Return(run)
	return _c
}

// VisitTable provides a mock function with given fields: ctx, table, parent, workspace
func (_m *MockDataObjectVisitor) VisitTable(ctx context.Context, table *catalog.TableInfo, parent *catalog.SchemaInfo, workspace *provisioning.Workspace) error {
	ret := _m.Called(ctx, table, parent, workspace)

	if len(ret) == 0 {
		panic("no return value specified for VisitTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.TableInfo, *catalog.SchemaInfo, *provisioning.Workspace) error); ok {
		r0 = rf(ctx, table, parent, workspace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataObjectVisitor_VisitTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitTable'
type MockDataObjectVisitor_VisitTable_Call struct {
	*mock.Call
}

// VisitTable is a helper method to define mock.On call
//   - ctx context.Context
//   - table *catalog.TableInfo
//   - parent *catalog.SchemaInfo
//   - workspace *provisioning.Workspace
func (_e *MockDataObjectVisitor_Expecter) VisitTable(ctx interface{}, table interface{}, parent interface{}, workspace interface{}) *MockDataObjectVisitor_VisitTable_Call {
	return &MockDataObjectVisitor_VisitTable_Call{Call: _e.mock.On("VisitTable", ctx, table, parent, workspace)}
}

func (_c *MockDataObjectVisitor_VisitTable_Call) Run(run func(ctx context.Context, table *catalog.TableInfo, parent *catalog.SchemaInfo, workspace *provisioning.Workspace)) *MockDataObjectVisitor_VisitTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*catalog.TableInfo), args[2].(*catalog.SchemaInfo), args[3].(*provisioning.Workspace))
	})
	return _c
}

func (_c *MockDataObjectVisitor_VisitTable_Call) Return(_a0 error) *MockDataObjectVisitor_VisitTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataObjectVisitor_VisitTable_Call) RunAndReturn(run func(context.Context, *catalog.TableInfo, *catalog.SchemaInfo, *provisioning.Workspace) error) *MockDataObjectVisitor_VisitTable_Call {
	_c.Call.Return(run)
	return _c
}

// VisitWorkspace provides a mock function with given fields: ctx, workspace
func (_m *MockDataObjectVisitor) VisitWorkspace(ctx context.Context, workspace *provisioning.Workspace) error {
	ret := _m.Called(ctx, workspace)

	if len(ret) == 0 {
		panic("no return value specified for VisitWorkspace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *provisioning.Workspace) error); ok {
		r0 = rf(ctx, workspace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataObjectVisitor_VisitWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitWorkspace'
type MockDataObjectVisitor_VisitWorkspace_Call struct {
	*mock.Call
}

// VisitWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - workspace *provisioning.Workspace
func (_e *MockDataObjectVisitor_Expecter) VisitWorkspace(ctx interface{}, workspace interface{}) *MockDataObjectVisitor_VisitWorkspace_Call {
	return &MockDataObjectVisitor_VisitWorkspace_Call{Call: _e.mock.On("VisitWorkspace", ctx, workspace)}
}

func (_c *MockDataObjectVisitor_VisitWorkspace_Call) Run(run func(ctx context.Context, workspace *provisioning.Workspace)) *MockDataObjectVisitor_VisitWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*provisioning.Workspace))
	})
	return _c
}

func (_c *MockDataObjectVisitor_VisitWorkspace_Call) Return(_a0 error) *MockDataObjectVisitor_VisitWorkspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataObjectVisitor_VisitWorkspace_Call) RunAndReturn(run func(context.Context, *provisioning.Workspace) error) *MockDataObjectVisitor_VisitWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataObjectVisitor creates a new instance of MockDataObjectVisitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataObjectVisitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataObjectVisitor {
	mock := &MockDataObjectVisitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
