// Code generated by mockery v2.36.0. DO NOT EDIT.

package databricks

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	iam "github.com/databricks/databricks-sdk-go/service/iam"

	mock "github.com/stretchr/testify/mock"
)

// mockDataAccessAccountRepository is an autogenerated mock type for the dataAccessAccountRepository type
type mockDataAccessAccountRepository struct {
	mock.Mock
}

type mockDataAccessAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataAccessAccountRepository) EXPECT() *mockDataAccessAccountRepository_Expecter {
	return &mockDataAccessAccountRepository_Expecter{mock: &_m.Mock}
}

// GetWorkspaceMap provides a mock function with given fields: ctx, metastores, workspaces
func (_m *mockDataAccessAccountRepository) GetWorkspaceMap(ctx context.Context, metastores []catalog.MetastoreInfo, workspaces []Workspace) (map[string][]string, map[string]string, error) {
	ret := _m.Called(ctx, metastores, workspaces)

	var r0 map[string][]string
	var r1 map[string]string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []catalog.MetastoreInfo, []Workspace) (map[string][]string, map[string]string, error)); ok {
		return rf(ctx, metastores, workspaces)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []catalog.MetastoreInfo, []Workspace) map[string][]string); ok {
		r0 = rf(ctx, metastores, workspaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []catalog.MetastoreInfo, []Workspace) map[string]string); ok {
		r1 = rf(ctx, metastores, workspaces)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []catalog.MetastoreInfo, []Workspace) error); ok {
		r2 = rf(ctx, metastores, workspaces)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockDataAccessAccountRepository_GetWorkspaceMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceMap'
type mockDataAccessAccountRepository_GetWorkspaceMap_Call struct {
	*mock.Call
}

// GetWorkspaceMap is a helper method to define mock.On call
//   - ctx context.Context
//   - metastores []catalog.MetastoreInfo
//   - workspaces []Workspace
func (_e *mockDataAccessAccountRepository_Expecter) GetWorkspaceMap(ctx interface{}, metastores interface{}, workspaces interface{}) *mockDataAccessAccountRepository_GetWorkspaceMap_Call {
	return &mockDataAccessAccountRepository_GetWorkspaceMap_Call{Call: _e.mock.On("GetWorkspaceMap", ctx, metastores, workspaces)}
}

func (_c *mockDataAccessAccountRepository_GetWorkspaceMap_Call) Run(run func(ctx context.Context, metastores []catalog.MetastoreInfo, workspaces []Workspace)) *mockDataAccessAccountRepository_GetWorkspaceMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]catalog.MetastoreInfo), args[2].([]Workspace))
	})
	return _c
}

func (_c *mockDataAccessAccountRepository_GetWorkspaceMap_Call) Return(_a0 map[string][]string, _a1 map[string]string, _a2 error) *mockDataAccessAccountRepository_GetWorkspaceMap_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockDataAccessAccountRepository_GetWorkspaceMap_Call) RunAndReturn(run func(context.Context, []catalog.MetastoreInfo, []Workspace) (map[string][]string, map[string]string, error)) *mockDataAccessAccountRepository_GetWorkspaceMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaces provides a mock function with given fields: ctx
func (_m *mockDataAccessAccountRepository) GetWorkspaces(ctx context.Context) ([]Workspace, error) {
	ret := _m.Called(ctx)

	var r0 []Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Workspace, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Workspace); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessAccountRepository_GetWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaces'
type mockDataAccessAccountRepository_GetWorkspaces_Call struct {
	*mock.Call
}

// GetWorkspaces is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDataAccessAccountRepository_Expecter) GetWorkspaces(ctx interface{}) *mockDataAccessAccountRepository_GetWorkspaces_Call {
	return &mockDataAccessAccountRepository_GetWorkspaces_Call{Call: _e.mock.On("GetWorkspaces", ctx)}
}

func (_c *mockDataAccessAccountRepository_GetWorkspaces_Call) Run(run func(ctx context.Context)) *mockDataAccessAccountRepository_GetWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDataAccessAccountRepository_GetWorkspaces_Call) Return(_a0 []Workspace, _a1 error) *mockDataAccessAccountRepository_GetWorkspaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessAccountRepository_GetWorkspaces_Call) RunAndReturn(run func(context.Context) ([]Workspace, error)) *mockDataAccessAccountRepository_GetWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function with given fields: ctx, optFn
func (_m *mockDataAccessAccountRepository) ListGroups(ctx context.Context, optFn ...func(*databricksGroupsFilter)) <-chan interface{} {
	_va := make([]interface{}, len(optFn))
	for _i := range optFn {
		_va[_i] = optFn[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 <-chan interface{}
	if rf, ok := ret.Get(0).(func(context.Context, ...func(*databricksGroupsFilter)) <-chan interface{}); ok {
		r0 = rf(ctx, optFn...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan interface{})
		}
	}

	return r0
}

// mockDataAccessAccountRepository_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type mockDataAccessAccountRepository_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - optFn ...func(*databricksGroupsFilter)
func (_e *mockDataAccessAccountRepository_Expecter) ListGroups(ctx interface{}, optFn ...interface{}) *mockDataAccessAccountRepository_ListGroups_Call {
	return &mockDataAccessAccountRepository_ListGroups_Call{Call: _e.mock.On("ListGroups",
		append([]interface{}{ctx}, optFn...)...)}
}

func (_c *mockDataAccessAccountRepository_ListGroups_Call) Run(run func(ctx context.Context, optFn ...func(*databricksGroupsFilter))) *mockDataAccessAccountRepository_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*databricksGroupsFilter), len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(func(*databricksGroupsFilter))
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessAccountRepository_ListGroups_Call) Return(_a0 <-chan interface{}) *mockDataAccessAccountRepository_ListGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessAccountRepository_ListGroups_Call) RunAndReturn(run func(context.Context, ...func(*databricksGroupsFilter)) <-chan interface{}) *mockDataAccessAccountRepository_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetastores provides a mock function with given fields: ctx
func (_m *mockDataAccessAccountRepository) ListMetastores(ctx context.Context) ([]catalog.MetastoreInfo, error) {
	ret := _m.Called(ctx)

	var r0 []catalog.MetastoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]catalog.MetastoreInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []catalog.MetastoreInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.MetastoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessAccountRepository_ListMetastores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetastores'
type mockDataAccessAccountRepository_ListMetastores_Call struct {
	*mock.Call
}

// ListMetastores is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDataAccessAccountRepository_Expecter) ListMetastores(ctx interface{}) *mockDataAccessAccountRepository_ListMetastores_Call {
	return &mockDataAccessAccountRepository_ListMetastores_Call{Call: _e.mock.On("ListMetastores", ctx)}
}

func (_c *mockDataAccessAccountRepository_ListMetastores_Call) Run(run func(ctx context.Context)) *mockDataAccessAccountRepository_ListMetastores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDataAccessAccountRepository_ListMetastores_Call) Return(_a0 []catalog.MetastoreInfo, _a1 error) *mockDataAccessAccountRepository_ListMetastores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessAccountRepository_ListMetastores_Call) RunAndReturn(run func(context.Context) ([]catalog.MetastoreInfo, error)) *mockDataAccessAccountRepository_ListMetastores_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, optFn
func (_m *mockDataAccessAccountRepository) ListUsers(ctx context.Context, optFn ...func(*databricksUsersFilter)) <-chan interface{} {
	_va := make([]interface{}, len(optFn))
	for _i := range optFn {
		_va[_i] = optFn[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 <-chan interface{}
	if rf, ok := ret.Get(0).(func(context.Context, ...func(*databricksUsersFilter)) <-chan interface{}); ok {
		r0 = rf(ctx, optFn...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan interface{})
		}
	}

	return r0
}

// mockDataAccessAccountRepository_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type mockDataAccessAccountRepository_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - optFn ...func(*databricksUsersFilter)
func (_e *mockDataAccessAccountRepository_Expecter) ListUsers(ctx interface{}, optFn ...interface{}) *mockDataAccessAccountRepository_ListUsers_Call {
	return &mockDataAccessAccountRepository_ListUsers_Call{Call: _e.mock.On("ListUsers",
		append([]interface{}{ctx}, optFn...)...)}
}

func (_c *mockDataAccessAccountRepository_ListUsers_Call) Run(run func(ctx context.Context, optFn ...func(*databricksUsersFilter))) *mockDataAccessAccountRepository_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*databricksUsersFilter), len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(func(*databricksUsersFilter))
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessAccountRepository_ListUsers_Call) Return(_a0 <-chan interface{}) *mockDataAccessAccountRepository_ListUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessAccountRepository_ListUsers_Call) RunAndReturn(run func(context.Context, ...func(*databricksUsersFilter)) <-chan interface{}) *mockDataAccessAccountRepository_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkspaceAssignments provides a mock function with given fields: ctx, workspaceId
func (_m *mockDataAccessAccountRepository) ListWorkspaceAssignments(ctx context.Context, workspaceId int) ([]iam.PermissionAssignment, error) {
	ret := _m.Called(ctx, workspaceId)

	var r0 []iam.PermissionAssignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]iam.PermissionAssignment, error)); ok {
		return rf(ctx, workspaceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []iam.PermissionAssignment); ok {
		r0 = rf(ctx, workspaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iam.PermissionAssignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, workspaceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessAccountRepository_ListWorkspaceAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkspaceAssignments'
type mockDataAccessAccountRepository_ListWorkspaceAssignments_Call struct {
	*mock.Call
}

// ListWorkspaceAssignments is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceId int
func (_e *mockDataAccessAccountRepository_Expecter) ListWorkspaceAssignments(ctx interface{}, workspaceId interface{}) *mockDataAccessAccountRepository_ListWorkspaceAssignments_Call {
	return &mockDataAccessAccountRepository_ListWorkspaceAssignments_Call{Call: _e.mock.On("ListWorkspaceAssignments", ctx, workspaceId)}
}

func (_c *mockDataAccessAccountRepository_ListWorkspaceAssignments_Call) Run(run func(ctx context.Context, workspaceId int)) *mockDataAccessAccountRepository_ListWorkspaceAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *mockDataAccessAccountRepository_ListWorkspaceAssignments_Call) Return(_a0 []iam.PermissionAssignment, _a1 error) *mockDataAccessAccountRepository_ListWorkspaceAssignments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessAccountRepository_ListWorkspaceAssignments_Call) RunAndReturn(run func(context.Context, int) ([]iam.PermissionAssignment, error)) *mockDataAccessAccountRepository_ListWorkspaceAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkspaceAssignment provides a mock function with given fields: ctx, workspaceId, principalId, permission
func (_m *mockDataAccessAccountRepository) UpdateWorkspaceAssignment(ctx context.Context, workspaceId int, principalId int64, permission []iam.WorkspacePermission) error {
	ret := _m.Called(ctx, workspaceId, principalId, permission)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int64, []iam.WorkspacePermission) error); ok {
		r0 = rf(ctx, workspaceId, principalId, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkspaceAssignment'
type mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call struct {
	*mock.Call
}

// UpdateWorkspaceAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceId int
//   - principalId int64
//   - permission []iam.WorkspacePermission
func (_e *mockDataAccessAccountRepository_Expecter) UpdateWorkspaceAssignment(ctx interface{}, workspaceId interface{}, principalId interface{}, permission interface{}) *mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call {
	return &mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call{Call: _e.mock.On("UpdateWorkspaceAssignment", ctx, workspaceId, principalId, permission)}
}

func (_c *mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call) Run(run func(ctx context.Context, workspaceId int, principalId int64, permission []iam.WorkspacePermission)) *mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int64), args[3].([]iam.WorkspacePermission))
	})
	return _c
}

func (_c *mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call) Return(_a0 error) *mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call) RunAndReturn(run func(context.Context, int, int64, []iam.WorkspacePermission) error) *mockDataAccessAccountRepository_UpdateWorkspaceAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDataAccessAccountRepository creates a new instance of mockDataAccessAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDataAccessAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDataAccessAccountRepository {
	mock := &mockDataAccessAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
