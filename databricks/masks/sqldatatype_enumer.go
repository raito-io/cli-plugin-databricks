// Code generated by "enumer -type=SqlDataType -trimprefix=DataType -transform=lower"; DO NOT EDIT.

package masks

import (
	"fmt"
	"strings"
)

const _SqlDataTypeName = "bigintbinarybooleandatedecimaldoublefloatintintervalvoidsmallintstringtimestamptimestamp_ntztinyintarraymapstruct"

var _SqlDataTypeIndex = [...]uint8{0, 6, 12, 19, 23, 30, 36, 41, 44, 52, 56, 64, 70, 79, 92, 99, 104, 107, 113}

const _SqlDataTypeLowerName = "bigintbinarybooleandatedecimaldoublefloatintintervalvoidsmallintstringtimestamptimestamp_ntztinyintarraymapstruct"

func (i SqlDataType) String() string {
	i -= 1
	if i < 0 || i >= SqlDataType(len(_SqlDataTypeIndex)-1) {
		return fmt.Sprintf("SqlDataType(%d)", i+1)
	}
	return _SqlDataTypeName[_SqlDataTypeIndex[i]:_SqlDataTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SqlDataTypeNoOp() {
	var x [1]struct{}
	_ = x[DataTypeBigInt-(1)]
	_ = x[DataTypeBinary-(2)]
	_ = x[DataTypeBoolean-(3)]
	_ = x[DataTypeDate-(4)]
	_ = x[DataTypeDecimal-(5)]
	_ = x[DataTypeDouble-(6)]
	_ = x[DataTypeFloat-(7)]
	_ = x[DataTypeInt-(8)]
	_ = x[DataTypeInterval-(9)]
	_ = x[DataTypeVoid-(10)]
	_ = x[DataTypeSmallInt-(11)]
	_ = x[DataTypeString-(12)]
	_ = x[DataTypeTimestamp-(13)]
	_ = x[DataTypeTimestamp_NTZ-(14)]
	_ = x[DataTypeTinyInt-(15)]
	_ = x[DataTypeArray-(16)]
	_ = x[DataTypeMap-(17)]
	_ = x[DataTypeStruct-(18)]
}

var _SqlDataTypeValues = []SqlDataType{DataTypeBigInt, DataTypeBinary, DataTypeBoolean, DataTypeDate, DataTypeDecimal, DataTypeDouble, DataTypeFloat, DataTypeInt, DataTypeInterval, DataTypeVoid, DataTypeSmallInt, DataTypeString, DataTypeTimestamp, DataTypeTimestamp_NTZ, DataTypeTinyInt, DataTypeArray, DataTypeMap, DataTypeStruct}

var _SqlDataTypeNameToValueMap = map[string]SqlDataType{
	_SqlDataTypeName[0:6]:          DataTypeBigInt,
	_SqlDataTypeLowerName[0:6]:     DataTypeBigInt,
	_SqlDataTypeName[6:12]:         DataTypeBinary,
	_SqlDataTypeLowerName[6:12]:    DataTypeBinary,
	_SqlDataTypeName[12:19]:        DataTypeBoolean,
	_SqlDataTypeLowerName[12:19]:   DataTypeBoolean,
	_SqlDataTypeName[19:23]:        DataTypeDate,
	_SqlDataTypeLowerName[19:23]:   DataTypeDate,
	_SqlDataTypeName[23:30]:        DataTypeDecimal,
	_SqlDataTypeLowerName[23:30]:   DataTypeDecimal,
	_SqlDataTypeName[30:36]:        DataTypeDouble,
	_SqlDataTypeLowerName[30:36]:   DataTypeDouble,
	_SqlDataTypeName[36:41]:        DataTypeFloat,
	_SqlDataTypeLowerName[36:41]:   DataTypeFloat,
	_SqlDataTypeName[41:44]:        DataTypeInt,
	_SqlDataTypeLowerName[41:44]:   DataTypeInt,
	_SqlDataTypeName[44:52]:        DataTypeInterval,
	_SqlDataTypeLowerName[44:52]:   DataTypeInterval,
	_SqlDataTypeName[52:56]:        DataTypeVoid,
	_SqlDataTypeLowerName[52:56]:   DataTypeVoid,
	_SqlDataTypeName[56:64]:        DataTypeSmallInt,
	_SqlDataTypeLowerName[56:64]:   DataTypeSmallInt,
	_SqlDataTypeName[64:70]:        DataTypeString,
	_SqlDataTypeLowerName[64:70]:   DataTypeString,
	_SqlDataTypeName[70:79]:        DataTypeTimestamp,
	_SqlDataTypeLowerName[70:79]:   DataTypeTimestamp,
	_SqlDataTypeName[79:92]:        DataTypeTimestamp_NTZ,
	_SqlDataTypeLowerName[79:92]:   DataTypeTimestamp_NTZ,
	_SqlDataTypeName[92:99]:        DataTypeTinyInt,
	_SqlDataTypeLowerName[92:99]:   DataTypeTinyInt,
	_SqlDataTypeName[99:104]:       DataTypeArray,
	_SqlDataTypeLowerName[99:104]:  DataTypeArray,
	_SqlDataTypeName[104:107]:      DataTypeMap,
	_SqlDataTypeLowerName[104:107]: DataTypeMap,
	_SqlDataTypeName[107:113]:      DataTypeStruct,
	_SqlDataTypeLowerName[107:113]: DataTypeStruct,
}

var _SqlDataTypeNames = []string{
	_SqlDataTypeName[0:6],
	_SqlDataTypeName[6:12],
	_SqlDataTypeName[12:19],
	_SqlDataTypeName[19:23],
	_SqlDataTypeName[23:30],
	_SqlDataTypeName[30:36],
	_SqlDataTypeName[36:41],
	_SqlDataTypeName[41:44],
	_SqlDataTypeName[44:52],
	_SqlDataTypeName[52:56],
	_SqlDataTypeName[56:64],
	_SqlDataTypeName[64:70],
	_SqlDataTypeName[70:79],
	_SqlDataTypeName[79:92],
	_SqlDataTypeName[92:99],
	_SqlDataTypeName[99:104],
	_SqlDataTypeName[104:107],
	_SqlDataTypeName[107:113],
}

// SqlDataTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SqlDataTypeString(s string) (SqlDataType, error) {
	if val, ok := _SqlDataTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SqlDataTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SqlDataType values", s)
}

// SqlDataTypeValues returns all values of the enum
func SqlDataTypeValues() []SqlDataType {
	return _SqlDataTypeValues
}

// SqlDataTypeStrings returns a slice of all String values of the enum
func SqlDataTypeStrings() []string {
	strs := make([]string, len(_SqlDataTypeNames))
	copy(strs, _SqlDataTypeNames)
	return strs
}

// IsASqlDataType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SqlDataType) IsASqlDataType() bool {
	for _, v := range _SqlDataTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
