// Code generated by mockery v2.43.0. DO NOT EDIT.

package databricks

import (
	context "context"

	catalog "github.com/databricks/databricks-sdk-go/service/catalog"

	mock "github.com/stretchr/testify/mock"

	provisioning "github.com/databricks/databricks-sdk-go/service/provisioning"
)

// mockAccountRepository is an autogenerated mock type for the accountRepository type
type mockAccountRepository struct {
	mock.Mock
}

type mockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAccountRepository) EXPECT() *mockAccountRepository_Expecter {
	return &mockAccountRepository_Expecter{mock: &_m.Mock}
}

// GetWorkspaceMap provides a mock function with given fields: ctx, metastores, workspaces
func (_m *mockAccountRepository) GetWorkspaceMap(ctx context.Context, metastores []catalog.MetastoreInfo, workspaces []provisioning.Workspace) (map[string][]string, map[string]string, error) {
	ret := _m.Called(ctx, metastores, workspaces)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceMap")
	}

	var r0 map[string][]string
	var r1 map[string]string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []catalog.MetastoreInfo, []provisioning.Workspace) (map[string][]string, map[string]string, error)); ok {
		return rf(ctx, metastores, workspaces)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []catalog.MetastoreInfo, []provisioning.Workspace) map[string][]string); ok {
		r0 = rf(ctx, metastores, workspaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []catalog.MetastoreInfo, []provisioning.Workspace) map[string]string); ok {
		r1 = rf(ctx, metastores, workspaces)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []catalog.MetastoreInfo, []provisioning.Workspace) error); ok {
		r2 = rf(ctx, metastores, workspaces)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockAccountRepository_GetWorkspaceMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceMap'
type mockAccountRepository_GetWorkspaceMap_Call struct {
	*mock.Call
}

// GetWorkspaceMap is a helper method to define mock.On call
//   - ctx context.Context
//   - metastores []catalog.MetastoreInfo
//   - workspaces []provisioning.Workspace
func (_e *mockAccountRepository_Expecter) GetWorkspaceMap(ctx interface{}, metastores interface{}, workspaces interface{}) *mockAccountRepository_GetWorkspaceMap_Call {
	return &mockAccountRepository_GetWorkspaceMap_Call{Call: _e.mock.On("GetWorkspaceMap", ctx, metastores, workspaces)}
}

func (_c *mockAccountRepository_GetWorkspaceMap_Call) Run(run func(ctx context.Context, metastores []catalog.MetastoreInfo, workspaces []provisioning.Workspace)) *mockAccountRepository_GetWorkspaceMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]catalog.MetastoreInfo), args[2].([]provisioning.Workspace))
	})
	return _c
}

func (_c *mockAccountRepository_GetWorkspaceMap_Call) Return(_a0 map[string][]string, _a1 map[string]string, _a2 error) *mockAccountRepository_GetWorkspaceMap_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockAccountRepository_GetWorkspaceMap_Call) RunAndReturn(run func(context.Context, []catalog.MetastoreInfo, []provisioning.Workspace) (map[string][]string, map[string]string, error)) *mockAccountRepository_GetWorkspaceMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaces provides a mock function with given fields: ctx
func (_m *mockAccountRepository) GetWorkspaces(ctx context.Context) ([]provisioning.Workspace, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaces")
	}

	var r0 []provisioning.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]provisioning.Workspace, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []provisioning.Workspace); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]provisioning.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAccountRepository_GetWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaces'
type mockAccountRepository_GetWorkspaces_Call struct {
	*mock.Call
}

// GetWorkspaces is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockAccountRepository_Expecter) GetWorkspaces(ctx interface{}) *mockAccountRepository_GetWorkspaces_Call {
	return &mockAccountRepository_GetWorkspaces_Call{Call: _e.mock.On("GetWorkspaces", ctx)}
}

func (_c *mockAccountRepository_GetWorkspaces_Call) Run(run func(ctx context.Context)) *mockAccountRepository_GetWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockAccountRepository_GetWorkspaces_Call) Return(_a0 []provisioning.Workspace, _a1 error) *mockAccountRepository_GetWorkspaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAccountRepository_GetWorkspaces_Call) RunAndReturn(run func(context.Context) ([]provisioning.Workspace, error)) *mockAccountRepository_GetWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetastores provides a mock function with given fields: ctx
func (_m *mockAccountRepository) ListMetastores(ctx context.Context) ([]catalog.MetastoreInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListMetastores")
	}

	var r0 []catalog.MetastoreInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]catalog.MetastoreInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []catalog.MetastoreInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.MetastoreInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAccountRepository_ListMetastores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetastores'
type mockAccountRepository_ListMetastores_Call struct {
	*mock.Call
}

// ListMetastores is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockAccountRepository_Expecter) ListMetastores(ctx interface{}) *mockAccountRepository_ListMetastores_Call {
	return &mockAccountRepository_ListMetastores_Call{Call: _e.mock.On("ListMetastores", ctx)}
}

func (_c *mockAccountRepository_ListMetastores_Call) Run(run func(ctx context.Context)) *mockAccountRepository_ListMetastores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockAccountRepository_ListMetastores_Call) Return(_a0 []catalog.MetastoreInfo, _a1 error) *mockAccountRepository_ListMetastores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAccountRepository_ListMetastores_Call) RunAndReturn(run func(context.Context) ([]catalog.MetastoreInfo, error)) *mockAccountRepository_ListMetastores_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAccountRepository creates a new instance of mockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAccountRepository {
	mock := &mockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
