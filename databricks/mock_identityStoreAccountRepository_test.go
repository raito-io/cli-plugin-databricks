// Code generated by mockery v2.33.2. DO NOT EDIT.

package databricks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockIdentityStoreAccountRepository is an autogenerated mock type for the identityStoreAccountRepository type
type mockIdentityStoreAccountRepository struct {
	mock.Mock
}

type mockIdentityStoreAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIdentityStoreAccountRepository) EXPECT() *mockIdentityStoreAccountRepository_Expecter {
	return &mockIdentityStoreAccountRepository_Expecter{mock: &_m.Mock}
}

// ListGroups provides a mock function with given fields: ctx, optFn
func (_m *mockIdentityStoreAccountRepository) ListGroups(ctx context.Context, optFn ...func(*databricksGroupsFilter)) <-chan interface{} {
	_va := make([]interface{}, len(optFn))
	for _i := range optFn {
		_va[_i] = optFn[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 <-chan interface{}
	if rf, ok := ret.Get(0).(func(context.Context, ...func(*databricksGroupsFilter)) <-chan interface{}); ok {
		r0 = rf(ctx, optFn...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan interface{})
		}
	}

	return r0
}

// mockIdentityStoreAccountRepository_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type mockIdentityStoreAccountRepository_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - optFn ...func(*databricksGroupsFilter)
func (_e *mockIdentityStoreAccountRepository_Expecter) ListGroups(ctx interface{}, optFn ...interface{}) *mockIdentityStoreAccountRepository_ListGroups_Call {
	return &mockIdentityStoreAccountRepository_ListGroups_Call{Call: _e.mock.On("ListGroups",
		append([]interface{}{ctx}, optFn...)...)}
}

func (_c *mockIdentityStoreAccountRepository_ListGroups_Call) Run(run func(ctx context.Context, optFn ...func(*databricksGroupsFilter))) *mockIdentityStoreAccountRepository_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*databricksGroupsFilter), len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(func(*databricksGroupsFilter))
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *mockIdentityStoreAccountRepository_ListGroups_Call) Return(_a0 <-chan interface{}) *mockIdentityStoreAccountRepository_ListGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockIdentityStoreAccountRepository_ListGroups_Call) RunAndReturn(run func(context.Context, ...func(*databricksGroupsFilter)) <-chan interface{}) *mockIdentityStoreAccountRepository_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, optFn
func (_m *mockIdentityStoreAccountRepository) ListUsers(ctx context.Context, optFn ...func(*databricksUsersFilter)) <-chan interface{} {
	_va := make([]interface{}, len(optFn))
	for _i := range optFn {
		_va[_i] = optFn[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 <-chan interface{}
	if rf, ok := ret.Get(0).(func(context.Context, ...func(*databricksUsersFilter)) <-chan interface{}); ok {
		r0 = rf(ctx, optFn...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan interface{})
		}
	}

	return r0
}

// mockIdentityStoreAccountRepository_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type mockIdentityStoreAccountRepository_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - optFn ...func(*databricksUsersFilter)
func (_e *mockIdentityStoreAccountRepository_Expecter) ListUsers(ctx interface{}, optFn ...interface{}) *mockIdentityStoreAccountRepository_ListUsers_Call {
	return &mockIdentityStoreAccountRepository_ListUsers_Call{Call: _e.mock.On("ListUsers",
		append([]interface{}{ctx}, optFn...)...)}
}

func (_c *mockIdentityStoreAccountRepository_ListUsers_Call) Run(run func(ctx context.Context, optFn ...func(*databricksUsersFilter))) *mockIdentityStoreAccountRepository_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*databricksUsersFilter), len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(func(*databricksUsersFilter))
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *mockIdentityStoreAccountRepository_ListUsers_Call) Return(_a0 <-chan interface{}) *mockIdentityStoreAccountRepository_ListUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockIdentityStoreAccountRepository_ListUsers_Call) RunAndReturn(run func(context.Context, ...func(*databricksUsersFilter)) <-chan interface{}) *mockIdentityStoreAccountRepository_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// newMockIdentityStoreAccountRepository creates a new instance of mockIdentityStoreAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockIdentityStoreAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockIdentityStoreAccountRepository {
	mock := &mockIdentityStoreAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
